---
import CustomSeo from "@components/CustomSeo.astro";
import EventCard from "@components/EventCard.astro";
import SideNav from "@components/SideNav.astro";
import TopNav from "@components/TopNav.astro";
import Layout from "@layouts/Layout.astro";
import { getCollection, getEntry } from "astro:content";

const entry = await getEntry("events-page", "events");

if (entry === undefined) {
  throw new Error("Entry not found");
}

const { data } = entry;

const rawEvents = await getCollection("events");

const events = rawEvents
  .sort(
    (e1, e2) =>
      new Date(e1.data.date).getTime() - new Date(e2.data.date).getTime()
  )
  .filter((e) => e.id.startsWith("content"));

const pastEvents = events.filter((e) => new Date(e.data.date) < new Date());
const futureEvents = events.filter((e) => new Date(e.data.date) >= new Date());

const futureEventsFirstColumn: typeof events = [];
const futureEventsSecondColumn: typeof events = [];

for (let i = 0; i < futureEvents.length; i++) {
  if (i % 2 === 0) futureEventsFirstColumn.push(futureEvents[i]);
  else futureEventsSecondColumn.push(futureEvents[i]);
}

const pastEventsFirstColumn: typeof events = [];
const pastEventsSecondColumn: typeof events = [];

for (let i = 0; i < pastEvents.length; i++) {
  if (i % 2 === 0) pastEventsFirstColumn.push(pastEvents[i]);
  else pastEventsSecondColumn.push(pastEvents[i]);
}
---

<Layout title="Welcome to Astro.">
  <CustomSeo
    slot="head"
    title={data.seo.title}
    description={data.seo.description}
  />

  <TopNav>Programmation</TopNav>

  <SideNav showIndexLink showPresentationLink showMenuLink showDayMenuLink />

  <main
    h-full
    text-gray-800
    grow
    overflow-y-auto
    bg-background-gray
    class="p-y-8 p-x-4 md:p-x-8"
  >
    <h1 hidden md:block text="8 md:center" uppercase font-display font-normal>
      Programmation
    </h1>

    <div hidden lg:grid cols-2 gap-8 mt-8 max-w-250 m-x-auto>
      <div flex="~ col" gap-12>
        {futureEventsFirstColumn.map((event) => <EventCard {event} />)}
      </div>

      <div flex="~ col" gap-12>
        {futureEventsSecondColumn.map((event) => <EventCard {event} />)}
      </div>
    </div>

    <div flex="~ col" gap-8 class="lg:hidden" max-w-250 m="x-auto md:t-8">
      {futureEvents.map((event) => <EventCard {event} />)}
    </div>

    {
      futureEvents.length === 0 && (
        <p flex items-center gap-2 justify-center mt-16>
          <i i-carbon-calendar block w-6 h-6 />
          {data.noEventsText}
        </p>
      )
    }

    {
      pastEvents.length !== 0 && (
        <h2 text="6 md:center" uppercase font-display font-normal m="t-8 b-6 md:b-0">
          Événements passés
        </h2>

        <div hidden lg:grid cols-2 gap-8 mt-8 max-w-250 m-x-auto>
          <div flex="~ col" gap-12>
            {pastEventsFirstColumn.map((event) => <EventCard {event} />)}
          </div>

          <div flex="~ col" gap-12>
            {pastEventsSecondColumn.map((event) => <EventCard {event} />)}
          </div>
        </div>

        <div flex="~ col" gap-8 class="lg:hidden" max-w-250 m="x-auto md:t-8">
          {pastEvents.map((event) => <EventCard {event} />)}
        </div>
      )
    }
  </main>

  <SideNav showContactLink showLegalLink />
</Layout>
